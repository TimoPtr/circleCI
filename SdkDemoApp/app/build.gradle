apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def hasKeystoreParameter = project.hasProperty('storeFilePath')

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "cn.colgate.colgateconnect"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName versions.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions 'branding', 'environment'

    dataBinding {
        //DO NOT CHANGE
        enabled = false
    }

    signingConfigs {
        release {
            if (hasKeystoreParameter) {
                storeFile file(project["storeFilePath"])
                keyAlias project["alias"]
                storePassword project["aliasPass"]
                keyPassword project["keyPass"]
            }
        }

        debug {
            storeFile file("${rootProject.rootDir}/../keystores/debug.keystore")
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }


    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false

            if (hasKeystoreParameter) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    productFlavors {

        colgate {
            dimension 'branding'
        }

        staging {
            dimension 'environment'
            buildConfigField 'boolean', 'PRODUCTION', 'false'
            versionNameSuffix "-STAGING"
        }

        production {
            dimension 'environment'
            buildConfigField 'boolean', 'PRODUCTION', 'true'
            versionNameSuffix "-PRODUCTION"
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/rxjava.properties'
        return void
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {

    // ========================================================================================================== //
    // =                                                                                                        = //
    // =                                 Kolibree SDK dependencies section                                      = //
    // =                                                                                                        = //
    // ========================================================================================================== //

    def modulesVersion = versions.name
    implementation("com.kolibree.android:core:$modulesVersion")
    implementation("com.kolibree.android:static-resources:$modulesVersion")

    // ========================================================================================================== //
    // =                                                                                                        = //
    // =                                    Common dependencies section                                         = //
    // =                                                                                                        = //
    // ========================================================================================================== //

    implementation libraries.kotlinRuntime

    implementation libraries.lifecycleRuntime
    implementation libraries.lifecycleExtensions

    // Dagger
    implementation libraries.dagger
    kapt libraries.daggerCompiler
    kaptAndroidTest libraries.daggerCompiler
    implementation libraries.daggerAndroid
    implementation libraries.daggerAndroidSupport
    kapt libraries.daggerAndroidProcessor
    kaptAndroidTest libraries.daggerAndroidProcessor

    // RxJava
    implementation libraries.rxJava
    implementation libraries.rxAndroid

    // Support
    implementation libraries.supportAppCompat
    implementation libraries.supportCardView
    implementation libraries.supportRecyclerView
    implementation libraries.supportDesign
    implementation libraries.supportConstraintLayout

    // View injection
    implementation(libraries.butterKnife) {
        exclude group: 'com.android.support'
    }
    kapt libraries.butterKnifeCompiler

    implementation libraries.glide

    implementation libraries.threetenAbp

    // ========================================================================================================== //
    // =                                                                                                        = //
    // =                               DemoApp specific dependencies section                                    = //
    // =                                                                                                        = //
    // ========================================================================================================== //

    implementation 'de.hdodenhof:circleimageview:2.2.0'

    //Umeng libraries

    implementation 'com.umeng.umsdk:common:1.5.4'
    implementation 'com.umeng.umsdk:utdid:1.1.5.3'
    implementation 'com.umeng.umsdk:push:5.0.2'

    //noinspection GradleDynamicVersion
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'

    //eventbus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //flipper
    debugImplementation libraries.flipper
    debugImplementation libraries.flipperNetwork
    debugImplementation libraries.soloader

    androidTestImplementation "com.kolibree.android:testing-shared:$versions.name"
    androidTestImplementation "com.kolibree.android:testing-espresso-base:$versions.name"
    androidTestImplementation libraries.supportTestCore
}

apply from: "${rootProject.rootDir}/buildscripts/post_settings.gradle"

apply from: '../../SDK/buildscripts/marathon.gradle'
apply from: '../../SDK/buildscripts/detekt/detekt.gradle'
apply from: '../../SDK/buildscripts/spotless.gradle'

project.afterEvaluate {
    android.applicationVariants
            .all { variant ->
                createTaskForMissingBrFilesCopy(variant)
            }

}

def createTaskForMissingBrFilesCopy(variant) {
    def task = tasks.create(name: "copySdkDatabindingBrFilesTo${variant.name.capitalize()}", type: Copy) {
        def brFilePath = "../../SDK/Core/build/intermediates/javac/${variant.buildType.name}/classes/"
        if (!file(brFilePath).exists()) return

        from(brFilePath) {
            include '**/BR.class'
        }
        into "build/intermediates/javac/${variant.name}/classes/"

        includeEmptyDirs = false
    }
    tasks.matching { it.name == "assemble${variant.name.capitalize()}" }.first().dependsOn task
}
